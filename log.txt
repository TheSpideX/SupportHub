## WebSocket Middleware Plan

Based on your architecture document and existing code, here's a plan for updating middleware files to support your WebSocket authentication system:

### Existing Middleware to Update:

1. **`authenticate.js`**:
   - Add WebSocket token validation functions
   - Support cookie-based authentication for WebSockets
   - Handle token refresh coordination with WebSockets

2. **`csrf.js`**:
   - Update to support WebSocket connections
   - Ensure CSRF tokens work across HTTP and WebSocket contexts
   - Add WebSocket-specific CSRF validation

3. **`session.js`**:
   - Add WebSocket session tracking
   - Implement session synchronization across tabs
   - Support hierarchical room session management

4. **`rate-limit.js`**:
   - Add WebSocket-specific rate limiting
   - Implement connection throttling for WebSockets
   - Share rate limit counters between HTTP and WebSockets

### New Middleware Files Needed:

1. **`socket-auth.js`**:
   - WebSocket-specific authentication middleware
   - Handle socket handshake authentication
   - Validate HTTP-only cookies during connection

2. **`socket-rooms.js`**:
   - Manage room subscriptions
   - Implement hierarchical room structure
   - Handle room join/leave authorization

3. **`socket-events.js`**:
   - Event propagation middleware
   - Filter and route events based on room hierarchy
   - Implement selective event propagation

4. **`cross-tab.js`**:
   - Leader election middleware
   - Cross-tab state synchronization
   - Connection sharing coordination

### Middleware to Remove/Consolidate:

None of the existing middleware should be removed, but some functionality might be consolidated.

### Controller Changes:

No new controllers are needed. The existing controllers should be updated to:
1. Use the WebSocket services when appropriate
2. Emit events to the correct rooms
3. Handle WebSocket-specific error cases

### Implementation Priority:

1. First: `socket-auth.js` - Core authentication
2. Second: `authenticate.js` updates - Token handling
3. Third: `socket-rooms.js` - Room management
4. Fourth: `socket-events.js` - Event propagation
5. Fifth: Cross-tab coordination

This approach maintains your existing HTTP authentication while adding WebSocket support, ensuring a single source of truth for authentication logic.
