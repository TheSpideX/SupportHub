[vite] connecting...
client:866 [vite] connected.
logger.ts:137 [storage.utils.ts] Storage type localStorage available: true {}
logger.ts:137 [storage.utils.ts] Storage type sessionStorage available: true {}
logger.ts:137 [storage.utils.ts] Storage type cookie available: true {}
logger.ts:137 [TokenService.ts?t=1742514517306] TokenService initialized with refresh threshold: 300s, heartbeat: 30s {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token existence check {hasFlag: false, hasSession: false, cookies: {…}}
logger.ts:137 [TokenService.ts?t=1742514517306] TokenService initialized in standby mode (no authenticated user) {}
logger.ts:137 [SessionService.ts?t=1742514517306] Cross-tab communication initialized for SessionService {}
logger.ts:137 [SessionService.ts?t=1742514517306] SessionService initialized {}
logger.ts:137 [auth/init][init.ts?t=1742514517306] Initializing authentication system {component: 'auth/init'}
logger.ts:127 [TokenService.ts?t=1742514517306] TokenService already initialized, returning existing instance {}
logger.ts:137 [SecurityService.ts?t=1742514517306] Security context initialized {}
logger.ts:137 [SecurityService.ts?t=1742514517306] Device fingerprint generated {}
logger.ts:137 [SecurityService.ts?t=1742514517306] SecurityService initialized {}
logger.ts:137 [SessionService.ts?t=1742514517306] Cross-tab communication initialized for SessionService {}
logger.ts:137 [SessionService.ts?t=1742514517306] SessionService initialized {}
logger.ts:127 [AuthService.ts?t=1742514517306] Cross-tab communication initialized for AuthService {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token existence check {hasFlag: false, hasSession: false, cookies: {…}}
logger.ts:137 [AuthService.ts?t=1742514517306] AuthService initialized {}
logger.ts:127 [AuthService.ts?t=1742514517306] Cross-tab communication already initialized for AuthService {}
logger.ts:137 [TokenService.ts?t=1742514517306] CSRF protection initialized {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token existence check {hasFlag: false, hasSession: false, cookies: {…}}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage rendered with detailed auth state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: false, reduxUser: 'null', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage rendered with detailed auth state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: false, reduxUser: 'null', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/login'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage authentication check effect with detailed state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: false, from: '/dashboard'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Direct auth service state check {component: 'LoginPage', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: false, serviceUserRole: undefined}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Auth state changed in LoginPage {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: false, reduxUser: 'null', …}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Direct auth service state check {component: 'LoginPage', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: false, serviceUserRole: undefined}
logger.ts:137 [App][App.tsx?t=1742514517306] Starting auth initialization (attempt #1) {component: 'App'}
logger.ts:137 [AuthService.ts?t=1742514517306] Initializing auth service and checking for existing session {}
logger.ts:137 [AuthService.ts?t=1742514517306] Cookie check: No auth cookies found {}
logger.ts:137 [AuthService.ts?t=1742514517306] Attempting to validate session with backend {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token existence check {hasFlag: false, hasSession: false, cookies: {…}}
logger.ts:137 [AuthService.ts?t=1742514517306] No valid session found, initializing as unauthenticated {}
logger.ts:127 [AuthService.ts?t=1742514517306] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage authentication check effect with detailed state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: false, from: '/dashboard'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Direct auth service state check {component: 'LoginPage', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: false, serviceUserRole: undefined}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Auth state changed in LoginPage {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: false, reduxUser: 'null', …}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Direct auth service state check {component: 'LoginPage', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: false, serviceUserRole: undefined}
logger.ts:127 [App][App.tsx?t=1742514517306] Auth initialization already triggered, skipping {component: 'App'}
logger.ts:137 [App][App.tsx?t=1742514517306] No active session found, user is not authenticated {component: 'App'}
logger.ts:127 [authSlice][authSlice.ts] Auth state initialized in Redux {component: 'authSlice', isInitialized: true}
logger.ts:137 [App][App.tsx?t=1742514517306] Auth initialized successfully {component: 'App'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage rendered with detailed auth state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'null', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage rendered with detailed auth state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'null', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Auth state changed in LoginPage {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'null', …}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Direct auth service state check {component: 'LoginPage', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: false, serviceUserRole: undefined}
logger.ts:127 [AuthService.ts?t=1742514517306] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [AuthService.ts?t=1742514517306] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage rendered with detailed auth state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'null', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage rendered with detailed auth state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'null', …}
logger.ts:127 [LoginForm][LoginForm.tsx] Login form submission attempt {component: 'LoginForm', action: 'handleFormSubmit', hasEmail: true, hasPassword: '[REDACTED]'}
logger.ts:127 [LoginForm][LoginForm.tsx] Calling onSubmit handler {component: 'LoginForm'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] Login form submitted {component: 'LoginPage', email: '***@***'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Getting device fingerprint {component: 'LoginPage'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Preparing login request with security context {component: 'LoginPage'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Calling login function {component: 'LoginPage'}
logger.ts:127 [AuthService.ts?t=1742514517306] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage rendered with detailed auth state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'null', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage rendered with detailed auth state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'null', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/login'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/login'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Auth state changed in LoginPage {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'null', …}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Direct auth service state check {component: 'LoginPage', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: false, serviceUserRole: undefined}
logger.ts:137 [TokenService.ts?t=1742514517306] Initializing TokenService after authentication {}
logger.ts:127 [TokenService.ts?t=1742514517306] User activity tracking initialized {}
logger.ts:127 [TokenService.ts?t=1742514517306] Inactivity check scheduled every 300 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token heartbeat started with interval of 60000ms {}
logger.ts:127 [AuthService.ts?t=1742514517306] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [AuthService.ts?t=1742514517306] Session metadata stored {}
logger.ts:137 [SessionService.ts?t=1742514517306] Starting session tracking {}
logger.ts:127 [SessionService.ts?t=1742514517306] Creating default session {}
logger.ts:127 [SessionService.ts?t=1742514517306] Default session created {id: 'session-1742514540611'}
logger.ts:127 [SessionService.ts?t=1742514517306] Activity tracking set up {}
logger.ts:127 [SessionService.ts?t=1742514517306] Setting up session expiry check {}
logger.ts:127 [SessionService.ts?t=1742514517306] Syncing session with server {}
logger.ts:127 [SessionService.ts?t=1742514517306] No CSRF token found, attempting to rotate token {}
logger.ts:137 [TokenService.ts?t=1742514517306] CSRF token set {}
logger.ts:137 [AuthService.ts?t=1742514517306] Session tracking started for session ID: 67dca96c91ef8ba61e91c6f9
logger.ts:137 [AuthService.ts?t=1742514517306] Login successful {}
logger.ts:127 [SessionService.ts?t=1742514517306] Using CSRF token for session sync {}
logger.ts:137 [SecurityService.ts?t=1742514517306] Device fingerprint generated {}
logger.ts:127 [SessionService.ts?t=1742514517306] Preparing session sync data {sessionId: null, hasLastActivity: true}
logger.ts:137 [useAuth][useAuth.ts?t=1742514517306] Login successful {component: 'useAuth'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage rendered with detailed auth state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'null', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage rendered with detailed auth state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'null', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Auth state changed in LoginPage {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'null', …}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Direct auth service state check {component: 'LoginPage', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: true, serviceUserRole: 'admin'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] Login successful, navigating to: {component: 'LoginPage', destination: '/dashboard'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Session heartbeat started {component: 'LoginPage'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Login form submission completed {component: 'LoginPage'}
logger.ts:137 [TokenService.ts?t=1742514517306] Device fingerprint generated {}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard redirecting to login {component: 'AuthGuard', from: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard redirecting to login {component: 'AuthGuard', from: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard verifyAuth started {component: 'AuthGuard', isInitialized: true, isAuthenticated: '[REDACTED]', cookies: 'Cookies present', path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] Auth service state check {component: 'AuthGuard', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: true, reduxIsAuthenticated: '[REDACTED]'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] Auth state mismatch detected - syncing Redux with service state {component: 'AuthGuard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard verifyAuth started {component: 'AuthGuard', isInitialized: true, isAuthenticated: '[REDACTED]', cookies: 'Cookies present', path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] Auth service state check {component: 'AuthGuard', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: true, reduxIsAuthenticated: '[REDACTED]'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] Auth state mismatch detected - syncing Redux with service state {component: 'AuthGuard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage rendered with detailed auth state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'exists', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage rendered with detailed auth state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'exists', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/login'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage authentication check effect with detailed state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, from: '/dashboard'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Direct auth service state check {component: 'LoginPage', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: true, serviceUserRole: 'admin'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] User authenticated, redirecting from login page {component: 'LoginPage', redirectTo: '/dashboard'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Auth state changed in LoginPage {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'undefined (admin)', …}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Direct auth service state check {component: 'LoginPage', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: true, serviceUserRole: 'admin'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] LoginPage authentication check effect with detailed state {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, from: '/dashboard'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Direct auth service state check {component: 'LoginPage', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: true, serviceUserRole: 'admin'}
logger.ts:137 [LoginPage][LoginPage.tsx?t=1742514517306] User authenticated, redirecting from login page {component: 'LoginPage', redirectTo: '/dashboard'}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Auth state changed in LoginPage {component: 'LoginPage', hookIsAuthenticated: '[REDACTED]', reduxIsAuthenticated: '[REDACTED]', reduxIsInitialized: true, reduxUser: 'undefined (admin)', …}
logger.ts:127 [LoginPage][LoginPage.tsx?t=1742514517306] Direct auth service state check {component: 'LoginPage', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: true, serviceUserRole: 'admin'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742514517306] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742514517306] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [SessionService.ts?t=1742514517306] Session sync response {status: 200, hasData: true}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 839 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 779 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 719 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 659 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Inactivity check: Last activity was 301s ago, threshold: 1800s, inactive: false {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 573 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 513 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 453 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 393 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Inactivity check: Last activity was 507s ago, threshold: 1800s, inactive: false {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expiring soon (393s), refreshing due to recent activity {}
logger.ts:127 [TokenService.ts?t=1742514517306] Inactivity check: Last activity was 507s ago, threshold: 1800s, inactive: false {}
logger.ts:127 [TokenService.ts?t=1742514517306] Refreshing tokens {}
logger.ts:127 [TokenService.ts?t=1742514517306] Updating session data {id: '67dcab6791ef8ba61e91c707', expiresAt: '2025-03-27T23:57:27.658Z'}
logger.ts:127 [TokenService.ts?t=1742514517306] Tokens refreshed successfully {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 840 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Inactivity check: Last activity was 601s ago, threshold: 1800s, inactive: false {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 780 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 720 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 660 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 600 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 540 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Inactivity check: Last activity was 901s ago, threshold: 1800s, inactive: false {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 480 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 420 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 360 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Inactivity check: Last activity was 1047s ago, threshold: 1800s, inactive: false {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expiring soon (360s), refreshing due to recent activity {}
logger.ts:127 [TokenService.ts?t=1742514517306] Inactivity check: Last activity was 1047s ago, threshold: 1800s, inactive: false {}
logger.ts:127 [TokenService.ts?t=1742514517306] Refreshing tokens {}
logger.ts:127 [TokenService.ts?t=1742514517306] Updating session data {id: '67dcad8391ef8ba61e91c715', expiresAt: '2025-03-28T00:06:27.689Z'}
logger.ts:127 [TokenService.ts?t=1742514517306] Tokens refreshed successfully {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 840 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 780 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Inactivity check: Last activity was 1201s ago, threshold: 1800s, inactive: false {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 720 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 660 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 600 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 540 seconds {}
logger.ts:127 [TokenService.ts?t=1742514517306] Token expires in 484 seconds {}



User Experience
No visible session timeout warning before automatic logout
Could improve the experience when returning after device sleep/inactivity
Remember Me Functionality
While the code mentions a "rememberMe" parameter, its implementation could be enhanced
Consider different token lifetimes based on this preference
Cross-Tab Synchronization
While mentioned in the configuration, it's not clear how well cross-tab session management works
Error Handling
Some error messages could be more user-friendly
Consider more graceful degradation when network issues occur
Refresh Token Security
Consider implementing token rotation on each refresh for enhanced security