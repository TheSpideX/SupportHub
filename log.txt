client:743 [vite] connecting...
client:866 [vite] connected.
logger.ts:137 [storage.utils.ts] Storage type localStorage available: true {}
 [storage.utils.ts] Storage type sessionStorage available: true {}
 [storage.utils.ts] Storage type cookie available: true {}
 [TokenService.ts?t=1742747102132] TokenService initialized with refresh threshold: 720s, heartbeat: 30s {}
 [TokenService.ts?t=1742747102132] Token existence check {hasFlag: true, cookies: {…}}
 [TokenService.ts?t=1742747102132] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:137 [TokenService.ts?t=1742747102132] Starting token heartbeat system {interval: 60000, hasTokens: '[REDACTED]', refreshThreshold: 720}
logger.ts:137 [TokenService.ts?t=1742747102132] Token heartbeat started with interval of 60s {intervalId: 3, startTime: '2025-03-23T16:25:14.525Z'}
logger.ts:127 [TokenService.ts?t=1742747102132] User activity tracking initialized with improved handling {}
logger.ts:127 [TokenService.ts?t=1742747102132] Inactivity check scheduled every 300 seconds {}
logger.ts:127 [TokenService.ts?t=1742747102132] Cross-tab communication initialized {}
logger.ts:127 [TokenService.ts?t=1742747102132] Device fingerprint initialized {}
logger.ts:137 [TokenService.ts?t=1742747102132] Token refresh scheduled in 603606 seconds {}
logger.ts:137 [TokenService.ts?t=1742747102132] TokenService fully initialized for authenticated user {}
logger.ts:137 [SessionService.ts?t=1742747102132] Cross-tab communication initialized for SessionService {}
logger.ts:137 [SessionService.ts?t=1742747102132] SessionService initialized {}
logger.ts:137 [auth/init][init.ts?t=1742747102132] Initializing authentication system {component: 'auth/init'}
logger.ts:127 [TokenService.ts?t=1742747102132] TokenService already initialized, returning existing instance {}
logger.ts:137 [SecurityService.ts?t=1742747102132] Security context initialized {}
logger.ts:137 [SecurityService.ts?t=1742747102132] Device fingerprint generated {}
logger.ts:137 [SecurityService.ts?t=1742747102132] SecurityService initialized {}
logger.ts:137 [SessionService.ts?t=1742747102132] Cross-tab communication initialized for SessionService {}
logger.ts:137 [SessionService.ts?t=1742747102132] SessionService initialized {}
logger.ts:127 [AuthService.ts?t=1742747102132] Cross-tab communication initialized for AuthService {}
logger.ts:127 [TokenService.ts?t=1742747102132] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:137 [AuthService.ts?t=1742747102132] AuthService initialized {}
logger.ts:127 [AuthService.ts?t=1742747102132] Cross-tab communication already initialized for AuthService {}
logger.ts:137 [TokenService.ts?t=1742747102132] CSRF protection initialized {}
logger.ts:127 [TokenService.ts?t=1742747102132] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: false, isLoading: true, path: '/dashboard', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: false, isLoading: true, path: '/dashboard', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard verifyAuth started {component: 'AuthGuard', isInitialized: false, isAuthenticated: '[REDACTED]', cookies: 'Cookies present', path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] Auth service state check {component: 'AuthGuard', serviceIsAuthenticated: '[REDACTED]', serviceHasUser: false, reduxIsAuthenticated: '[REDACTED]'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] Auth not initialized, initializing now {component: 'AuthGuard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] Calling validateSession API {component: 'AuthGuard'}
logger.ts:137 [App][App.tsx?t=1742747102132] Starting auth initialization (attempt #1) {component: 'App'}
logger.ts:137 [AuthService.ts?t=1742747102132] Initializing auth service and checking for existing session {}
logger.ts:137 [AuthService.ts?t=1742747102132] Cookie check: No auth cookies found {}
logger.ts:137 [AuthService.ts?t=1742747102132] Attempting to validate session with backend {}
logger.ts:127 [TokenService.ts?t=1742747102132] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] Auth validation already in progress, skipping {component: 'AuthGuard'}
logger.ts:127 [App][App.tsx?t=1742747102132] Auth initialization already triggered, skipping {component: 'App'}
logger.ts:127 [AuthService.ts?t=1742747102132] Fetching user data {}
logger.ts:127 [AuthService.ts?t=1742747102132] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [AuthService][AuthService.ts?t=1742747102132] Redux store updated with auth state {component: 'AuthService', hasUser: false}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: false, isLoading: true, path: '/dashboard', …}
 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: false, isLoading: true, path: '/dashboard', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] Auth validation already in progress, skipping {component: 'AuthGuard'}
logger.ts:127 [AuthService.ts?t=1742747102132] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [AuthService][AuthService.ts?t=1742747102132] Redux store updated with auth state {component: 'AuthService', hasUser: false}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: false, isLoading: true, path: '/dashboard', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: false, isLoading: true, path: '/dashboard', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: false, isLoading: true, path: '/dashboard', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: false, isLoading: true, path: '/dashboard', …}
logger.ts:127 [AuthService.ts?t=1742747102132] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [AuthService][AuthService.ts?t=1742747102132] Redux store updated with auth state {component: 'AuthService', hasUser: false}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: false, isLoading: true, path: '/dashboard', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: false, isLoading: true, path: '/dashboard', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:127 [authSlice][authSlice.ts] Auth state initialized in Redux {component: 'authSlice', isInitialized: true}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: true, path: '/dashboard', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: true, path: '/dashboard', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: true, path: '/dashboard'}
logger.ts:127 [AuthService.ts?t=1742747102132] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:137 [AuthService.ts?t=1742747102132] Valid session found, restoring user session {userId: '67d4a0b43019eebd5829ef34'}
logger.ts:127 [AuthService.ts?t=1742747102132] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:137 [SessionService.ts?t=1742747102132] Starting session tracking {}
logger.ts:127 [SessionService.ts?t=1742747102132] Creating default session {}
logger.ts:127 [SessionService.ts?t=1742747102132] Default session created {id: 'session-1742747114828'}
logger.ts:127 [SessionService.ts?t=1742747102132] Activity tracking set up {}
logger.ts:127 [SessionService.ts?t=1742747102132] Setting up session expiry check {}
logger.ts:127 [SessionService.ts?t=1742747102132] Syncing session with server {}
logger.ts:127 [SessionService.ts?t=1742747102132] Using CSRF token for session sync {}
logger.ts:137 [SecurityService.ts?t=1742747102132] Device fingerprint generated {}
logger.ts:127 [SessionService.ts?t=1742747102132] Preparing session sync data {sessionId: null, hasLastActivity: true}
logger.ts:137 [AuthService.ts?t=1742747102132] Session restored successfully {}
logger.ts:137 [App][App.tsx?t=1742747102132] User session restored successfully {component: 'App'}
logger.ts:137 [App][App.tsx?t=1742747102132] Auth initialized successfully {component: 'App'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: true, path: '/dashboard', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: true, path: '/dashboard', …}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747102132] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747102132] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [SessionService.ts?t=1742747102132] Session sync response {status: 200, hasData: true}
logger.ts:127 [TokenService.ts?t=1742747102132] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747102132] Tab became visible, checking token status {}
logger.ts:127 [TokenService.ts?t=1742747102132] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:137 [TokenService.ts?t=1742747102132] Token expires in 829 seconds {expiresInMs: 829000, refreshThreshold: 720000, shouldRefresh: false}
logger.ts:127 [TokenService.ts?t=1742747102132] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747102132] Tab became visible, checking token status {}
logger.ts:127 [TokenService.ts?t=1742747102132] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:137 [TokenService.ts?t=1742747102132] Token expires in 812 seconds {expiresInMs: 812000, refreshThreshold: 720000, shouldRefresh: false}
logger.ts:127 [TokenService.ts?t=1742747102132] Token heartbeat triggered {lastHeartbeatTime: 0, currentTime: 1742747174666, timeSinceLastHeartbeat: 1742747174666, refreshLockActive: false}
logger.ts:127 [TokenService.ts?t=1742747102132] Token status check - current session info {isValid: true, expiresAt: {…}, timeRemaining: 604689021, userId: ''}
logger.ts:137 [TokenService.ts?t=1742747102132] Performing token status heartbeat check {}
logger.ts:127 [TokenService.ts?t=1742747102132] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:127 [TokenService.ts?t=1742747102132] Token status data received {data: {…}, receivedAt: '2025-03-23T16:26:14.736Z'}
logger.ts:137 [TokenService.ts?t=1742747102132] Token expires in 789 seconds {expiresInMs: 789000, refreshThreshold: 720000, shouldRefresh: false}
logger.ts:127 [TokenService.ts?t=1742747102132] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747102132] Tab became visible, checking token status {}
logger.ts:127 [TokenService.ts?t=1742747102132] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:137 [TokenService.ts?t=1742747102132] Token expires in 768 seconds {expiresInMs: 768000, refreshThreshold: 720000, shouldRefresh: false}expiresInMs: 768000refreshThreshold: 720000shouldRefresh: false[[Prototype]]: Object
logger.ts:137 [TokenService.ts?t=1742747211699] TokenService initialized with refresh threshold: 720s, heartbeat: 30s {}
logger.ts:127 [TokenService.ts?t=1742747211699] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747211699] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:137 [TokenService.ts?t=1742747211699] Starting token heartbeat system {interval: 60000, hasTokens: '[REDACTED]', refreshThreshold: 720}
logger.ts:137 [TokenService.ts?t=1742747211699] Token heartbeat started with interval of 60s {intervalId: 181, startTime: '2025-03-23T16:26:51.835Z'}
logger.ts:127 [TokenService.ts?t=1742747211699] User activity tracking initialized with improved handling {}
logger.ts:127 [TokenService.ts?t=1742747211699] Inactivity check scheduled every 300 seconds {}
logger.ts:127 [TokenService.ts?t=1742747211699] Cross-tab communication initialized {}
logger.ts:127 [TokenService.ts?t=1742747211699] Device fingerprint initialized {}
logger.ts:137 [TokenService.ts?t=1742747211699] Token refresh scheduled in 603932 seconds {}
logger.ts:137 [TokenService.ts?t=1742747211699] TokenService fully initialized for authenticated user {}
logger.ts:137 [SessionService.ts?t=1742747211699] Cross-tab communication initialized for SessionService {}
logger.ts:137 [SessionService.ts?t=1742747211699] SessionService initialized {}
client:837 [vite] hot updated: /src/index.css
client:837 [vite] hot updated: /src/App.tsx
client:837 [vite] hot updated: /src/features/auth/components/AuthGuard.tsx
client:837 [vite] hot updated: /src/pages/auth/LoginPage.tsx
client:837 [vite] hot updated: /src/features/auth/components/AuthMonitorWidget.tsx
logger.ts:137 [auth/init][init.ts?t=1742747211699] Initializing authentication system {component: 'auth/init'}
logger.ts:127 [TokenService.ts?t=1742747211699] TokenService already initialized, returning existing instance {}
logger.ts:137 [SecurityService.ts?t=1742747211699] Security context initialized {}
logger.ts:137 [SecurityService.ts?t=1742747211699] Device fingerprint generated {}
logger.ts:137 [SecurityService.ts?t=1742747211699] SecurityService initialized {}
logger.ts:137 [SessionService.ts?t=1742747211699] Cross-tab communication initialized for SessionService {}
logger.ts:137 [SessionService.ts?t=1742747211699] SessionService initialized {}
logger.ts:127 [AuthService.ts?t=1742747211699] Cross-tab communication initialized for AuthService {}
logger.ts:127 [TokenService.ts?t=1742747211699] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:137 [AuthService.ts?t=1742747211699] AuthService initialized {}
logger.ts:127 [AuthService.ts?t=1742747211699] Cross-tab communication already initialized for AuthService {}
logger.ts:137 [TokenService.ts?t=1742747211699] CSRF protection initialized {}
logger.ts:127 [TokenService.ts?t=1742747211699] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [App][App.tsx?t=1742747211699] Auth initialization already triggered, skipping {component: 'App'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [AuthService.ts?t=1742747211699] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [AuthService][AuthService.ts?t=1742747211699] Redux store updated with auth state {component: 'AuthService', hasUser: false}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [AuthService.ts?t=1742747102132] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [AuthService.ts?t=1742747211699] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [AuthService][AuthService.ts?t=1742747211699] Redux store updated with auth state {component: 'AuthService', hasUser: false}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747211699] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747211699] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [AuthService.ts?t=1742747102132] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:137 [TokenService.ts?t=1742747212712] TokenService initialized with refresh threshold: 720s, heartbeat: 30s {}
logger.ts:127 [TokenService.ts?t=1742747212712] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747212712] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:137 [TokenService.ts?t=1742747212712] Starting token heartbeat system {interval: 60000, hasTokens: '[REDACTED]', refreshThreshold: 720}
logger.ts:137 [TokenService.ts?t=1742747212712] Token heartbeat started with interval of 60s {intervalId: 189, startTime: '2025-03-23T16:26:52.946Z'}
logger.ts:127 [TokenService.ts?t=1742747212712] User activity tracking initialized with improved handling {}
logger.ts:127 [TokenService.ts?t=1742747212712] Inactivity check scheduled every 300 seconds {}
logger.ts:127 [TokenService.ts?t=1742747212712] Cross-tab communication initialized {}
logger.ts:127 [TokenService.ts?t=1742747212712] Device fingerprint initialized {}
logger.ts:137 [TokenService.ts?t=1742747212712] Token refresh scheduled in 603931 seconds {}
logger.ts:137 [TokenService.ts?t=1742747212712] TokenService fully initialized for authenticated user {}
logger.ts:137 [SessionService.ts?t=1742747212712] Cross-tab communication initialized for SessionService {}
logger.ts:137 [SessionService.ts?t=1742747212712] SessionService initialized {}
client:837 [vite] hot updated: /src/index.css
client:837 [vite] hot updated: /src/App.tsx
client:837 [vite] hot updated: /src/features/auth/components/AuthGuard.tsx
client:837 [vite] hot updated: /src/pages/auth/LoginPage.tsx
client:837 [vite] hot updated: /src/features/auth/components/AuthMonitorWidget.tsx
logger.ts:137 [auth/init][init.ts?t=1742747212712] Initializing authentication system {component: 'auth/init'}
logger.ts:127 [TokenService.ts?t=1742747212712] TokenService already initialized, returning existing instance {}
logger.ts:137 [SecurityService.ts?t=1742747212712] Security context initialized {}
logger.ts:137 [SecurityService.ts?t=1742747212712] Device fingerprint generated {}
logger.ts:137 [SecurityService.ts?t=1742747212712] SecurityService initialized {}
logger.ts:137 [SessionService.ts?t=1742747212712] Cross-tab communication initialized for SessionService {}
logger.ts:137 [SessionService.ts?t=1742747212712] SessionService initialized {}
logger.ts:127 [AuthService.ts?t=1742747212712] Cross-tab communication initialized for AuthService {}
logger.ts:127 [TokenService.ts?t=1742747212712] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:137 [AuthService.ts?t=1742747212712] AuthService initialized {}
logger.ts:127 [AuthService.ts?t=1742747212712] Cross-tab communication already initialized for AuthService {}
logger.ts:137 [TokenService.ts?t=1742747212712] CSRF protection initialized {}
logger.ts:127 [TokenService.ts?t=1742747212712] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [App][App.tsx?t=1742747212712] Auth initialization already triggered, skipping {component: 'App'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [AuthService.ts?t=1742747212712] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [AuthService][AuthService.ts?t=1742747212712] Redux store updated with auth state {component: 'AuthService', hasUser: false}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [AuthService.ts?t=1742747102132] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [AuthService.ts?t=1742747211699] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [AuthService.ts?t=1742747212712] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [AuthService][AuthService.ts?t=1742747212712] Redux store updated with auth state {component: 'AuthService', hasUser: false}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard evaluation {component: 'AuthGuard', isAuthenticated: '[REDACTED]', isInitialized: true, isLoading: false, path: '/dashboard', …}
logger.ts:137 [AuthGuard][AuthGuard.tsx?t=1742747212712] AuthGuard rendering protected content {component: 'AuthGuard', path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [useAuth][useAuth.ts?t=1742747212712] useAuth hook called {component: 'useAuth', isAuthenticated: '[REDACTED]', isLoading: false, path: '/dashboard'}
logger.ts:127 [AuthService.ts?t=1742747102132] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [AuthService.ts?t=1742747211699] Auth state updated {isAuthenticated: '[REDACTED]'}
logger.ts:127 [TokenService.ts?t=1742747102132] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747102132] Tab became visible, checking token status {}
logger.ts:127 [TokenService.ts?t=1742747211699] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747211699] Tab became visible, checking token status {}
logger.ts:127 [TokenService.ts?t=1742747212712] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747212712] Tab became visible, checking token status {}
logger.ts:127 [TokenService.ts?t=1742747102132] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:137 [TokenService.ts?t=1742747102132] Token expires in 740 seconds {expiresInMs: 740000, refreshThreshold: 720000, shouldRefresh: false}
logger.ts:127 [TokenService.ts?t=1742747211699] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:137 [TokenService.ts?t=1742747211699] Token expires in 740 seconds {expiresInMs: 740000, refreshThreshold: 720000, shouldRefresh: false}
logger.ts:127 [TokenService.ts?t=1742747212712] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:137 [TokenService.ts?t=1742747212712] Token expires in 740 seconds {expiresInMs: 740000, refreshThreshold: 720000, shouldRefresh: false}
logger.ts:127 [TokenService.ts?t=1742747102132] Token heartbeat triggered {lastHeartbeatTime: 1742747174679, currentTime: 1742747234527, timeSinceLastHeartbeat: 59848, refreshLockActive: false}
logger.ts:127 [TokenService.ts?t=1742747102132] Token status check - current session info {isValid: true, expiresAt: {…}, timeRemaining: 604629165, userId: ''}
logger.ts:137 [TokenService.ts?t=1742747102132] Performing token status heartbeat check {}
logger.ts:127 [TokenService.ts?t=1742747102132] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:127 [TokenService.ts?t=1742747102132] Token status data received {data: {…}, receivedAt: '2025-03-23T16:27:14.569Z'}data: expiresIn: 729user: id: "67d4a0b43019eebd5829ef34"role: "admin"[[Prototype]]: Objectconstructor: ƒ Object()hasOwnProperty: ƒ hasOwnProperty()isPrototypeOf: ƒ isPrototypeOf()propertyIsEnumerable: ƒ propertyIsEnumerable()toLocaleString: ƒ toLocaleString()toString: ƒ toString()valueOf: ƒ valueOf()__defineGetter__: ƒ __defineGetter__()__defineSetter__: ƒ __defineSetter__()__lookupGetter__: ƒ __lookupGetter__()__lookupSetter__: ƒ __lookupSetter__()__proto__: (...)get __proto__: ƒ __proto__()set __proto__: ƒ __proto__()valid: true[[Prototype]]: ObjectreceivedAt: "2025-03-23T16:27:14.569Z"[[Prototype]]: Object
logger.ts:137 [TokenService.ts?t=1742747102132] Token expires in 729 seconds {expiresInMs: 729000, refreshThreshold: 720000, shouldRefresh: false}
logger.ts:127 [TokenService.ts?t=1742747102132] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747102132] Tab became visible, checking token status {}
logger.ts:127 [TokenService.ts?t=1742747211699] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747211699] Tab became visible, checking token status {}
logger.ts:127 [TokenService.ts?t=1742747212712] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747212712] Tab became visible, checking token status {}
logger.ts:127 [TokenService.ts?t=1742747102132] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:137 [TokenService.ts?t=1742747102132] Token expires in 707 seconds {expiresInMs: 707000, refreshThreshold: 720000, shouldRefresh: true}
logger.ts:137 [TokenService.ts?t=1742747102132] Token expiring soon, refreshing {}
logger.ts:137 [TokenService.ts?t=1742747102132] Starting token refresh {}
logger.ts:137 [TokenService.ts?t=1742747102132] Starting token refresh {}
logger.ts:127 [TokenService.ts?t=1742747211699] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:137 [TokenService.ts?t=1742747211699] Token expires in 707 seconds {expiresInMs: 707000, refreshThreshold: 720000, shouldRefresh: true}
logger.ts:137 [TokenService.ts?t=1742747211699] Token expiring soon, refreshing {}
logger.ts:137 [TokenService.ts?t=1742747211699] Starting token refresh {}
logger.ts:137 [TokenService.ts?t=1742747211699] Starting token refresh {}
logger.ts:127 [TokenService.ts?t=1742747212712] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:137 [TokenService.ts?t=1742747212712] Token expires in 707 seconds {expiresInMs: 707000, refreshThreshold: 720000, shouldRefresh: true}
logger.ts:137 [TokenService.ts?t=1742747212712] Token expiring soon, refreshing {}
logger.ts:137 [TokenService.ts?t=1742747212712] Starting token refresh {}
logger.ts:137 [TokenService.ts?t=1742747212712] Starting token refresh {}
logger.ts:137 [TokenService.ts?t=1742747102132] Token refresh successful {hasSession: true}
logger.ts:127 [TokenService.ts?t=1742747102132] Updating session data {id: '67e0367885a6b780099e0fca', expiresAt: '2025-03-30T16:27:36.379Z'}
logger.ts:127 [TokenService.ts?t=1742747102132] Notifying token refresh listeners {sessionData: {…}}
logger.ts:137 [TokenService.ts?t=1742747102132] Token refresh scheduled in 603887 seconds {}
logger.ts:127 [TokenService.ts?t=1742747102132] Notifying token refresh listeners {sessionData: {…}}
logger.ts:127 [TokenService.ts?t=1742747102132] Token refresh completed {success: true}
logger.ts:137 [TokenService.ts?t=1742747211699] Token refresh successful {hasSession: true}
logger.ts:127 [TokenService.ts?t=1742747211699] Updating session data {id: '67e0367885a6b780099e0fce', expiresAt: '2025-03-30T16:27:36.506Z'}
logger.ts:127 [TokenService.ts?t=1742747211699] Notifying token refresh listeners {sessionData: {…}}
logger.ts:137 [TokenService.ts?t=1742747211699] Token refresh scheduled in 603887 seconds {}
logger.ts:127 [TokenService.ts?t=1742747211699] Notifying token refresh listeners {sessionData: {…}}
logger.ts:127 [TokenService.ts?t=1742747211699] Token refresh completed {success: true}
logger.ts:137 [TokenService.ts?t=1742747212712] Token refresh successful {hasSession: true}
logger.ts:127 [TokenService.ts?t=1742747212712] Updating session data {id: '67e0367885a6b780099e0fd0', expiresAt: '2025-03-30T16:27:36.510Z'}
logger.ts:127 [TokenService.ts?t=1742747212712] Notifying token refresh listeners {sessionData: {…}}
logger.ts:137 [TokenService.ts?t=1742747212712] Token refresh scheduled in 603887 seconds {}
logger.ts:127 [TokenService.ts?t=1742747212712] Notifying token refresh listeners {sessionData: {…}}
logger.ts:127 [TokenService.ts?t=1742747212712] Token refresh completed {success: true}
logger.ts:127 [TokenService.ts?t=1742747211699] Token heartbeat triggered {lastHeartbeatTime: 0, currentTime: 1742747272663, timeSinceLastHeartbeat: 1742747272663, refreshLockActive: false}
logger.ts:127 [TokenService.ts?t=1742747211699] Token status check - current session info {isValid: true, expiresAt: {…}, timeRemaining: 604591030, userId: ''}
logger.ts:137 [TokenService.ts?t=1742747211699] Performing token status heartbeat check {}
logger.ts:127 [TokenService.ts?t=1742747211699] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:127 [TokenService.ts?t=1742747211699] Token status data received {data: {…}, receivedAt: '2025-03-23T16:27:52.737Z'}
logger.ts:137 [TokenService.ts?t=1742747211699] Token expires in 884 seconds {expiresInMs: 884000, refreshThreshold: 720000, shouldRefresh: false}
logger.ts:127 [TokenService.ts?t=1742747212712] Token heartbeat triggered {lastHeartbeatTime: 0, currentTime: 1742747273662, timeSinceLastHeartbeat: 1742747273662, refreshLockActive: false}
logger.ts:127 [TokenService.ts?t=1742747212712] Token status check - current session info {isValid: true, expiresAt: {…}, timeRemaining: 604590034, userId: ''}
logger.ts:137 [TokenService.ts?t=1742747212712] Performing token status heartbeat check {}
logger.ts:127 [TokenService.ts?t=1742747212712] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:127 [TokenService.ts?t=1742747212712] Token status data received {data: {…}, receivedAt: '2025-03-23T16:27:53.693Z'}
logger.ts:137 [TokenService.ts?t=1742747212712] Token expires in 883 seconds {expiresInMs: 883000, refreshThreshold: 720000, shouldRefresh: false}
logger.ts:127 [TokenService.ts?t=1742747102132] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747102132] Tab became visible, checking token status {}
logger.ts:127 [TokenService.ts?t=1742747211699] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747211699] Tab became visible, checking token status {}
logger.ts:127 [TokenService.ts?t=1742747212712] Token existence check {hasFlag: true, cookies: {…}}
logger.ts:127 [TokenService.ts?t=1742747212712] Tab became visible, checking token status {}
logger.ts:127 [TokenService.ts?t=1742747102132] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:137 [TokenService.ts?t=1742747102132] Token expires in 882 seconds {expiresInMs: 882000, refreshThreshold: 720000, shouldRefresh: false}
logger.ts:127 [TokenService.ts?t=1742747211699] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:137 [TokenService.ts?t=1742747211699] Token expires in 882 seconds {expiresInMs: 882000, refreshThreshold: 720000, shouldRefresh: false}
logger.ts:127 [TokenService.ts?t=1742747212712] Token status response received {status: 200, ok: true, statusText: 'OK'}
logger.ts:137 [TokenService.ts?t=1742747212712] Token expires in 882 seconds {expiresInMs: 882000, refreshThreshold: 720000, shouldRefresh: false}
